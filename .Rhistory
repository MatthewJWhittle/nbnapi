)))
plot(n, char_lengths)
plot(n, char_lengths ^ 2)
plot(n, sqrt(char_lengths))
plot(n, log(char_lengths))
plot(n, char_lengths)
n <-  seq(from = 1, to = 100, by = 1)
char_lengths <-
purrr::map_dbl(.x = n,
~nchar(st_as_text(
st_simplify(counties$geometry, dTolerance = .x)
)))
plot(n, char_lengths)
plot(n, char_lengths / lead(char_lengths, 1))
plot(n, char_lengths / lead(char_lengths, 2))
plot(n, char_lengths / lag(char_lengths, 1))
plot(n, char_lengths)
plot(st_simplify(counties$geometry, 40), add = TRUE, col = "red")
plot(st_simplify(counties$geometry, preserveTopology = 40), add = TRUE, col = "red")
plot(st_simplify(counties$geometry, dTolerance = 40), add = TRUE, col = "red")
plot(counties$geometry)
plot(st_simplify(counties$geometry, dTolerance = 40), add = TRUE, col = "red")
plot(st_simplify(counties$geometry, dTolerance = 40), add = TRUE, border = "red")
plot(counties$geometry)
plot(st_simplify(counties$geometry, dTolerance = 40), add = TRUE, border = "red")
plot(counties$geometry, border = "green")
plot(st_simplify(counties$geometry, dTolerance = 40), add = TRUE, border = "red")
plot(st_simplify(counties$geometry, dTolerance = 400), add = TRUE, border = "red")
plot(counties$geometry, border = "green")
plot(st_simplify(counties$geometry, dTolerance = 400), add = TRUE, border = "red")
st_length(counties)
sf::st_precision(counties)
plot(counties$geometry, border = "green")
st_perimeter(counties)
x <- counties$geometry
x <- st_transform(x, crs = 27700)
char <- 6000
st_cast("LINESTRING")
st_cast(x, "LINESTRING")
st_cast(x, "MULTILINESTRING")
st_length(st_cast(x, "MULTILINESTRING"))
x_char <-  nchar(st_as_text(x))
x_char
x_char <-  nchar(st_as_text(x))
factor <- x_char / char
factor
x_char <-  nchar(st_as_text(x))
factor <- x_char / char
while (nchar(st_as_text(x)) <= char){
x <- st_simplify(x, dTolerance = factor)
factor <- factor * 2
}
x
plot(x)
message(paste("Boundary simplified by ", factor))
factor
x <- counties$geometry
x <- st_transform(x, crs = 27700)
char <- 6000
x_char <-  nchar(st_as_text(x))
x_char
factor <- x_char / char
factor
require(getarc)
counties_endpoint <- "https://ons-inspire.esriuk.com/arcgis/rest/services/Administrative_Boundaries/Counties_and_Unitary_Authorities_December_2016_Boundaries/MapServer/0"
counties <- query_layer(endpoint = counties_endpoint,
query = c(returnRecordCount = 4,
where = c("ctyua16nm LIKE 'Yorkshite'")))
counties
char <- 100
x_char <-  nchar(st_as_text(x))
factor <- x_char / char
while (nchar(st_as_text(x)) <= char){
x <- st_simplify(x, dTolerance = factor)
factor <- factor * 2
}
message(paste("Boundary simplified by ", factor))
message(paste0("Boundary simplified by ", factor, "m"))
x <- counties$geometry
x <- st_transform(x, crs = 27700)
char <- 100
x_char <-  nchar(st_as_text(x))
factor <- x_char / char
while (nchar(st_as_text(x)) <= char){
x <- st_simplify(x, dTolerance = factor)
factor <- factor * 2
}
message(paste0("Boundary simplified by ", factor, "m"))
x <- counties$geometry
x <- st_transform(x, crs = 27700)
char <- 100
nchar(st_simplify(x, dTolerance = 924.21))
plot(x)
x_char <-  nchar(st_as_text(x))
factor <- x_char / char
while (nchar(st_as_text(x)) <= char){
x <- st_simplify(x, dTolerance = factor)
factor <- factor * 2
}
message(paste0("Boundary simplified for request. Returned records may not all be within supplied boundary."))
plot(x)
message(paste0("Boundary simplified for request. Returned records may not all be within supplied boundary.\n
To get all records within the boundary try applying a buffer and cropping the records."))
message(
paste0(
"Boundary simplified for request. Returned records may not all be within supplied boundary.\n
To get all records within the boundary try applying a buffer and cropping the records."
)
)
require(sf)
require(tidyverse)
n <- c(1:1000)
# all_counties <- query_layer(endpoint = counties_endpoint)
counties <- st_transform(counties, crs = 27700)
# nchar(st_as_text(counties$geometry))
# nchar(st_as_text(st_buffer(counties$geometry, 1000)))
n <-  seq(from = 1, to = 100, by = 1)
char_lengths <-
purrr::map_dbl(.x = n,
~nchar(st_as_text(
st_simplify(counties$geometry, dTolerance = .x)
)))
plot(n, char_lengths)
plot(counties$geometry, border = "green")
plot(st_simplify(counties$geometry, dTolerance = 400), add = TRUE, border = "red")
st_perimeter(counties)
sf::st_precision(counties)
st_peri
plot(n, char_lengths)
d <-  seq(from = 1, to = 100, by = 1)
char_lengths <-
purrr::map_dbl(.x = d,
~nchar(st_as_text(
st_simplify(counties$geometry, dTolerance = .x)
)))
plot(d, char_lengths)
exp(1)
exp(2)
2**2
?exp
load_all()
devtools::load_all()
.rs.restartR()
require(getarc)
counties_endpoint <- "https://ons-inspire.esriuk.com/arcgis/rest/services/Administrative_Boundaries/Counties_and_Unitary_Authorities_December_2016_Boundaries/MapServer/0"
counties <- query_layer(endpoint = counties_endpoint,
query = c(returnRecordCount = 4,
where = c("ctyua16nm LIKE 'Hartlepool'")))
taxon = "Betula pendula"
taxon = "Cyanistes caeruleus"
require(spatialutils)
#
# boundary <- xy_to_points(x = c(208503, 208503),
#                          y = c(921764, 921564)) %>% st_buffer(10000) %>% st_union()
boundary <- counties$geometry
boundary_simple <- simplify_sf_to_nchar(boundary)
load_all()
boundary_simple <- simplify_sf_to_nchar(boundary)
devtools::load_all()
counties_endpoint <- "https://ons-inspire.esriuk.com/arcgis/rest/services/Administrative_Boundaries/Counties_and_Unitary_Authorities_December_2016_Boundaries/MapServer/0"
counties <- query_layer(endpoint = counties_endpoint,
query = c(returnRecordCount = 4,
where = c("ctyua16nm LIKE 'Hartlepool'")))
taxon = "Betula pendula"
taxon = "Cyanistes caeruleus"
require(spatialutils)
#
# boundary <- xy_to_points(x = c(208503, 208503),
#                          y = c(921764, 921564)) %>% st_buffer(10000) %>% st_union()
boundary <- counties$geometry
boundary_simple <- simplify_sf_to_nchar(boundary)
# boundary <- st_simplify(st_transform(boundary, crs = 27700), 50, preserveTopology = F)
boundary <- st_transform(boundary, crs = 4326)
boundary_wkt <- st_as_text(boundary)
require(sf)
boundary_simple <- simplify_sf_to_nchar(boundary)
boundary_simple <- simplify_sf_to_nchar(boundary)
# boundary <- st_simplify(st_transform(boundary, crs = 27700), 50, preserveTopology = F)
boundary_simple <- st_transform(boundary_simple, crs = 4326)
boundary_wkt <- st_as_text(boundary_simple)
boundary_simple <- simplify_sf_to_nchar(boundary, char = 1000)
# boundary <- st_simplify(st_transform(boundary, crs = 27700), 50, preserveTopology = F)
boundary_simple <- st_transform(boundary_simple, crs = 4326)
boundary_wkt <- st_as_text(boundary_simple)
# Check that all arguments are numeric
# This will be redundant if sf support is brought in
if (!all(purrr::map_lgl(list(lat, lon, radius_km), is.numeric))) {
stop(paste0(
"Non-numeric argument passed to one of: ",
paste0(names(num_args), collapse = ", ")
))
}
# Specify the endpoint to download data from
endpoint <-
"https://records-ws.nbnatlas.org/occurrences/index/download"
# Specify in a list so it can be combined into the request string
# ACTION: add in more parameters that can be specified such as the data type etc
query_params <-
list(
reasonTypeId = 15,
q = gsub(" ", "+", taxon),
# lat = lat,
# lon = lon,
# radius = radius_km,
wkt = boundary_wkt,
qa = "none",
fileType = "shp"
)
query_string <- collapse_query_parameters(query_params)
request <- URLencode(paste0(endpoint, "?", query_string))
nchar(request)
nchar(boundary_wkt)
nchar(st_as_text(boundary_simple))
boundary_simple <- simplify_sf_to_nchar(boundary, char = 1000)
nchar(st_as_text(boundary_simple))
#
# boundary <- xy_to_points(x = c(208503, 208503),
#                          y = c(921764, 921564)) %>% st_buffer(10000) %>% st_union()
boundary <- counties$geometry
boundary_simple <- simplify_sf_to_nchar(st_transform(boundary, 4326), char = 1000)
boundary_simple
boundary_simple <- simplify_sf_to_nchar(st_transform(boundary, 27700), char = 1000)
boundary_simple
# boundary <- st_simplify(st_transform(boundary, crs = 27700), 50, preserveTopology = F)
boundary_simple <- st_transform(boundary_simple, crs = 4326)
boundary_wkt <- st_as_text(boundary_simple)
# Specify the endpoint to download data from
endpoint <-
"https://records-ws.nbnatlas.org/occurrences/index/download"
# Specify in a list so it can be combined into the request string
# ACTION: add in more parameters that can be specified such as the data type etc
query_params <-
list(
reasonTypeId = 15,
q = gsub(" ", "+", taxon),
# lat = lat,
# lon = lon,
# radius = radius_km,
wkt = boundary_wkt,
qa = "none",
fileType = "shp"
)
query_string <- collapse_query_parameters(query_params)
request <- URLencode(paste0(endpoint, "?", query_string))
nchar(request)
nchar(st_as_text(boundary_simple))
require(devtools)
use_test()
require(spatialutils)
spatialutils::random_points(bbox = st_bbox(c(0,1,3,4)))
spatialutils::random_points(bbox = st_bbox(c(0,1,3,4)), n_points = 10)
spatialutils::random_points(bbox = st_bbox(c(0,1,3,4)), n_points = 10,seed = 1)
spatialutils::random_points(bbox = st_bbox(c(500000,500000,600000,600000)), n_points = 10,seed = 1)
spatialutils::random_points(bbox = st_bbox(c(500000,500000,600000,600000), crs = 27700), n_points = 10,seed = 1)
rm(list = ls())
require(getarc)
require(sf)
counties_endpoint <- "https://ons-inspire.esriuk.com/arcgis/rest/services/Administrative_Boundaries/Counties_and_Unitary_Authorities_December_2016_Boundaries/MapServer/0"
counties <- query_layer(endpoint = counties_endpoint,
query = c(returnRecordCount = 4,
where = c("ctyua16nm LIKE 'Hartlepool'")))
west_yorkshire <- query_layer(endpoint = counties_endpoint,
query = c(returnRecordCount = 1,
where = c("ctyua16nm LIKE 'West Yorkshire'")))
west_yorkshire <- query_layer(endpoint = counties_endpoint,
query = c(returnRecordCount = 1,
where = c("ctyua16nm LIKE 'Yorkshire'")))
counties <- query_layer(endpoint = counties_endpoint)
counties
counties
counties$ctyua16cd
counties$ctyua16nm
counties %>%
filter(ctyua16nm == "Newcastle upon Tyne")
counties %>%
filter(ctyua16nm == "Newcastle upon Tyne")
counties
require(tidyverse)
counties %>%
filter(ctyua16nm == "Newcastle upon Tyne")
counties %>%
filter(ctyua16nm == "Newcastle upon Tyne") %>%
st_drop_geometry() %>%
plot()
counties %>%
filter(ctyua16nm == "Newcastle upon Tyne") %>%
st_geometry() %>%
plot()
counties$ctyua16nm
View(counties)
View(counties)
View(counties)
counties %>%
filter(ctyua16nm == "North Yorkshire") %>%
st_geometry() %>%
plot()
north_yorkshire <-
counties %>%
filter(ctyua16nm == "North Yorkshire")
counties %>%
filter(ctyua16nm == "North Yorkshire") %>%
st_geometry() %>%
plot()
?use_data
require(sf)
require(tidyverse)
require(devtools)
counties_endpoint <- "https://ons-inspire.esriuk.com/arcgis/rest/services/Administrative_Boundaries/Counties_and_Unitary_Authorities_December_2016_Boundaries/MapServer/0"
north_yorkshire <- query_layer(endpoint = counties_endpoint,
query = c(returnRecordCount = 1,
where = c("ctyua16nm LIKE 'North Yorkshire'")))
require(getarc)
north_yorkshire <- query_layer(endpoint = counties_endpoint,
query = c(returnRecordCount = 1,
where = c("ctyua16nm LIKE 'North Yorkshire'")))
north_yorkshire
?use_data
use_data_raw()
usethis::use_data(north_yorkshire, overwrite = T)
document()
north_yorkshire["ctyua16nm"]
GET("https://logger.nbnatlas.org/service/logger/reasons")
GET("https://logger.nbnatlas.org/service/logger/reasons")
jsonlite::fromJSON('[{"rkey":"logger.download.reason.biosecurity","name":"biosecurity management/planning","id":1,"deprecated":true},{"rkey":"logger.download.reason.public","name":"public|Download is for personal use only","id":15,"deprecated":false},{"rkey":"logger.download.reason.volunteer.research","name":"volunteer researcher/publisher|Download may lead to amateur (non-funded) publication, which could include National or Local scheme collators and verifiers","id":16,"deprecated":false},{"rkey":"logger.download.reason.citizen.science","name":"citizen science","id":11,"deprecated":true},{"rkey":"logger.download.reason.professional.research","name":"professional researcher/publisher|Download may lead to professional publication (including universities, NGOs etc. where people are being paid to research and publish)","id":17,"deprecated":false},{"rkey":"logger.download.reason.collection.mgmt","name":"collection management","id":5,"deprecated":true},{"rkey":"logger.download.reason.conservation","name":"conservation management/planning","id":0,"deprecated":true},{"rkey":"logger.download.reason.commercial","name":"commercial|Download is for the purposes of fulfilling a commercial contract","id":18,"deprecated":false},{"rkey":"logger.download.reason.ecological.research","name":"ecological research","id":7,"deprecated":true},{"rkey":"logger.download.reason.statutorywork","name":"statutory|Download is by a government-linked body or local authority for their statutory work","id":13,"deprecated":false},{"rkey":"logger.download.reason.education","name":"education|Download is for primary, secondary or tertiary educational purposes","id":3,"deprecated":false},{"rkey":"logger.download.reason.lerc.work","name":"LERC work|Download is for use by a local environmental records centre to support the provision of its services","id":14,"deprecated":false},{"rkey":"logger.download.reason.environmental","name":"environmental assessment","id":2,"deprecated":true},{"rkey":"logger.download.reason.testing","name":"testing|Testing","id":10,"deprecated":false},{"rkey":"logger.download.reason.restoration.remediation","name":"restoration/remediation","id":12,"deprecated":true},{"rkey":"logger.download.reason.research","name":"scientific research","id":4,"deprecated":true},{"rkey":"logger.download.reason.systematic.research","name":"systematic research/taxonomy","id":8,"deprecated":true}]')
require(getarc)
require(sf)
devtools::load_all()
north_yorkshire
taxon = "Betula pendula"
taxon = "Cyanistes caeruleus"
boundary_simple <- simplify_sf_to_nchar(st_transform(boundary, 27700), char = 1000)
#
# boundary <- xy_to_points(x = c(208503, 208503),
#                          y = c(921764, 921564)) %>% st_buffer(10000) %>% st_union()
boundary <- north_yorkshire$geometry
boundary_simple <- simplify_sf_to_nchar(st_transform(boundary, 27700), char = 1000)
nchar(st_as_text(boundary_simple))
expect_equal(nchar(st_as_text(simplify_sf_to_nchar(x, char = 1000))) <= 1000, TRUE)
expect_equal(nchar(st_as_text(simplify_sf_to_nchar(north_yorkshire, char = 1000))) <= 1000, TRUE)
expect_equal(nchar(st_as_text(simplify_sf_to_nchar(north_yorkshire$geometry, char = 1000))) <= 1000, TRUE)
plot(north_yorkshire)
plot(simplify_sf_to_nchar(north_yorkshire, 100))
plot(simplify_sf_to_nchar(north_yorkshire$geometry, 100))
x <- north_yorkshire$geometry
x_char <-  nchar(sf::st_as_text(x))
x_char
devtools::load_all()
x <- north_yorkshire$geometry
x_char <-  nchar(sf::st_as_text(x))
char <- 1000
x_char
(x_char <= char
)
factor <- x_char / char
factor
nchar(sf::st_as_text(x)) <= char
# simplify x with increasing dtolerance
# The effect of increasing dTolerance dimishes as x is simplified
# So the factor is doubled on each iteration
while (nchar(sf::st_as_text(x)) > char) {
x <- sf::st_simplify(x, dTolerance = factor)
factor <- factor * 2
}
north_yorkshire <-  north_yorkshire %>% st_transform(crs = 27700)
north_yorkshire <-  north_yorkshire %>% sf::st_transform(crs = 27700)
x <- north_yorkshire$geometry
x_char <-  nchar(sf::st_as_text(x))
# Don't execute the function if the character length is sufficiently low
if(x_char <= char){return(x)}
factor <- x_char / char
factor
# simplify x with increasing dtolerance
# The effect of increasing dTolerance dimishes as x is simplified
# So the factor is doubled on each iteration
while (nchar(sf::st_as_text(x)) > char) {
x <- sf::st_simplify(x, dTolerance = factor)
factor <- factor * 2
}
x <- north_yorkshire$geometry
# simplify x with increasing dtolerance
# The effect of increasing dTolerance dimishes as x is simplified
# So the factor is doubled on each iteration
i <- 1
while (nchar(sf::st_as_text(x)) > char) {
x <- sf::st_simplify(x, dTolerance = factor)
factor <- factor * 2
print(i)
i <- i + 1
}
load_all()
require(devtools)
load_all()
require(getarc)
require(sf)
devtools::load_all()
north_yorkshire
taxon = "Betula pendula"
taxon = "Cyanistes caeruleus"
taxon = "Betula pendula"
taxon = "Cyanistes caeruleus"
#
# boundary <- xy_to_points(x = c(208503, 208503),
#                          y = c(921764, 921564)) %>% st_buffer(10000) %>% st_union()
boundary <- north_yorkshire$geometry
boundary_simple <- simplify_sf_to_nchar(st_transform(boundary, 27700), char = 1000)
nchar(st_as_text(boundary_simple))
#nchar(st_as_text(boundary_simple))
# boundary <- st_simplify(st_transform(boundary, crs = 27700), 50, preserveTopology = F)
boundary_simple <- st_transform(boundary_simple, crs = 4326)
boundary_wkt <- st_as_text(boundary_simple)
# Specify the endpoint to download data from
endpoint <-
"https://records-ws.nbnatlas.org/occurrences/index/download"
# Specify in a list so it can be combined into the request string
# ACTION: add in more parameters that can be specified such as the data type etc
query_params <-
list(
reasonTypeId = 15,
q = gsub(" ", "+", taxon),
# lat = lat,
# lon = lon,
# radius = radius_km,
wkt = boundary_wkt,
qa = "none",
fileType = "shp"
)
query_string <- collapse_query_parameters(query_params)
request <- URLencode(paste0(endpoint, "?", query_string))
nchar(request)
data <- download_nbn_data(request)
request
data <- download_nbn_data(request)
data <- download_nbn_data(request)
data
plot(data$geometry)
# Specify in a list so it can be combined into the request string
# ACTION: add in more parameters that can be specified such as the data type etc
query_params <-
list(
reasonTypeId = 15,
q = gsub(" ", "+", taxon),
# lat = lat,
# lon = lon,
# radius = radius_km,
#wkt = boundary_wkt,
qa = "none",
fileType = "shp"
)
query_string <- collapse_query_parameters(query_params)
request <- URLencode(paste0(endpoint, "?", query_string))
data <- download_nbn_data(request)
taxon = "Epipactis dunensis"
# Specify the endpoint to download data from
endpoint <-
"https://records-ws.nbnatlas.org/occurrences/index/download"
# Specify in a list so it can be combined into the request string
# ACTION: add in more parameters that can be specified such as the data type etc
query_params <-
list(
reasonTypeId = 15,
q = gsub(" ", "+", taxon),
# lat = lat,
# lon = lon,
# radius = radius_km,
#wkt = boundary_wkt,
qa = "none",
fileType = "shp"
)
query_string <- collapse_query_parameters(query_params)
request <- URLencode(paste0(endpoint, "?", query_string))
data <- download_nbn_data(request)
plot(data$geometry)
# Specify in a list so it can be combined into the request string
# ACTION: add in more parameters that can be specified such as the data type etc
query_params <-
list(
reasonTypeId = 15,
q = gsub(" ", "+", taxon),
# lat = lat,
# lon = lon,
# radius = radius_km,
wkt = boundary_wkt,
qa = "none",
fileType = "shp"
)
query_string <- collapse_query_parameters(query_params)
request <- URLencode(paste0(endpoint, "?", query_string))
data <- download_nbn_data(request)
plot(boundary_simple, add = T)
data
boundary_wkt <- NULL
# Specify the endpoint to download data from
endpoint <-
"https://records-ws.nbnatlas.org/occurrences/index/download"
# Specify in a list so it can be combined into the request string
# ACTION: add in more parameters that can be specified such as the data type etc
query_params <-
list(
reasonTypeId = 15,
q = gsub(" ", "+", taxon),
# lat = lat,
# lon = lon,
# radius = radius_km,
wkt = boundary_wkt,
qa = "none",
fileType = "shp"
)
query_string <- collapse_query_parameters(query_params)
query_string
query_params
x <- query_params
query_string <- collapse_query_parameters(query_params, drop_null = T)
